#ant.properties - product.date is dynamically added; paste.js is imported
#Wed Apr 13 12:06:56 PDT 2011
product.version=2.6.7
iphoneapp=iphone
deploy.root=www
deploy.server=
closure=compiler.jar
pastejs=//\tpastelet- create bookmarklet for Mobile Safari to 'paste' provided text into HTML form text field\n//\n//\tCopyright (c) 2008-2010 Tom King. All rights reserved.\n//\n// Comments- Generated bookmarklet is carefully constructed.\n// *\tThe 'paste string' variable ('n') is defined first to make it more visible and ease editing the bookmark itself.\n// *\tThe text entry types for HTML5 are checked, except search. Search is skipped as a convenience (fixed text for a search is rare)\n// *\tBookmarklet code is optimized for size (ie, string length of all the code), given goal above.\n// **\tall vars are global, but could be scoped\n// **\tthe skip ('skp') option is provided for usability of common use case- sign-in forms (no confirmation needed)\n// **\tskip option also generates a smaller bookmarklet (old value not saved, var 'o' not defined, confirmation 'if' statement removed\n//\tspaces and optional ';' are removed-- eg, spaces between keywords and symbols, or the ';' before a '}'\n// **\tit wasn't written as an anonymous function, because the 'function(){..}' declaration adds characters (to resulting bookmarklet)\n// * void(0) is included for cross-browser compatibility, a non-null return value causes some browsers to navigate\n// * 'pastex.js' is a 'minified' version of makePastelet with spaces, etc condensed AND assignment/return done in one swoop\n//\n\nfunction pastelet(u,s) {\n\treturn ''\=\=u ? u \: "javascript\:var%20s\='" + encodeURIComponent(u) + "',f\=document.getElementsByTagName('input'),i\=0" + (s ? ";" \: ",o;") + "for(;i%3cf.length;i%2b%2b)if(f[i].type%20in{text\:1,email\:1,login\:1,tel\:1,url\:1,password\:1}" + "&&(f[i].id%2bf[i].name%2bf[i].title).indexOf('earch')%3c0){" + (s ? "" \: "o\=f[i].value;") + "f[i].focus();f[i].value\=s;" + (s ? "f[i].blur();break" \: "if(confirm('Paste%20Here?%20(field%20'%2b(i%2b1)%2b')')){f[i].blur();break}else%20f[i].value\=o") + "}void(0)"\n}\n\n// Examples below provide samples of the resulting bookmarklet and expanded/commented code of the bookmarklet\n// All examples assume the text to be pasted is 'your text'. Note examples below are slightly out-of-date & missing check to skip "search" fields.\n//\n\n// *\tSAMPLE ENCODED BOOKMARKLET from pastelet('your text', true)  (short 'skip confirm' version)\n// javascript\:var%20s\='your%20text',f\=document.getElementsByTagName('input'),i\=0;for(;i%3cf.length;i%2b%2b)\\\n// if(f[i].type%20in{text\:1,email\:1,login\:1,tel\:1,url\:1,password\:1}&&(f[i].id%2bf[i].name%2bf[i].title).indexOf('earch')%3c0){\\\n// f[i].focus();f[i].value\=s;f[i].blur();break}void(0)\n\n// *\tSAMPLE ENCODED BOOKMARKLET from pastelet('your text', false)  [longer 'do not skip, confirm field' version]\n// javascript\:var%20s\='your%20text',f\=document.getElementsByTagName('input'),i\=0,o;for(;i%3cf.length;i%2b%2b)\\\n// if(f[i].type%20in{text\:1,email\:1,login\:1,tel\:1,url\:1,password\:1}&&(f[i].id%2bf[i].name%2bf[i].title).indexOf('earch')%3c0){\\\n// o\=f[i].value;f[i].focus();f[i].value\=s;f[(i\=\=0?1\:0)].focus();f[i].focus();\\\n// if(confirm('Paste%20Here?%20(field%20'%2b(i%2b1)%2b')')){f[i].blur();break}else%20f[i].value\=o}void(0)\n\n// *\tANNOTATED JAVASCRIPT OF A BOOKMARKLET (short 'skip confirm' version)\n// \tjavascript\:\n//\t\t// new string to 'paste'\n//\t\tvar s \= 'your text',\n//\t\t// get array of all input elements\n//\t\tf \= document.getElementsByTagName('input'),\n//\t\ti; // loop index\n//\t\t// loop through inputs and process if a text entry type\n//\t\t// use property array of HTML 5 input types to check for text entry (or related types)\n//\t\tfor (; i < f.length; i++) if (f[i].type in {text\:1, email\:1, login\:1, tel\:1, url\:1, password\:1}\n//\t\t\t// match text fields above, but skip 'search' fields\n//\t\t\t&& (f[i].id + f[i].name + f[i].title).indexOf('earch') < 0) {\n//\t\t\t\tf[i].focus();\t// set focus\n//\t\t\t\tf[i].value \= s;\t// set field to new value\n//\t\t\t\tf[i].blur();\t// move focus (helps some frameworks)\n//\t\t\t\tbreak\n//\t\t}\n//\t\t// return void so browser doesn't navigate, etc.\n//\t\tvoid(0)\n\n// *\tANNOTATED JAVASCRIPT OF A BOOKMARKLET (longer 'confirm field' version)\n//\tjavascript\:\n//\t\t// new string to 'paste'\n//\t\tvar s \= 'your text',\n//\t\t// get array of all input elements\n//\t\tf \= document.getElementsByTagName('input'),\n//\t\ti \= 0,\t// loop index\n//\t\to;\t\t// old string to save/restore\n//\t\t// loop through inputs and process if a text entry type\n//\t\t// use property array of HTML 5 input types to check for text entry (or related types)\n//\t\tfor (; i < f.length; i++) if (f[i].type in {text\:1, email\:1, login\:1, tel\:1, url\:1, password\:1}\n//\t\t\t// match text fields above, but skip 'search' fields\n//\t\t\t&& (f[i].id + f[i].name + f[i].title).indexOf('earch') < 0) {\n//\t\t\t\to \= f[i].value;\t// get value currently in field\n//\t\t\t\tf[i].focus();\t// set focus\n//\t\t\t\tf[i].value \= s;\t// set field to new value\n//\t\t\t\t// confirm & exit or restore old value and try again\n//\t\t\t\tif (confirm('Paste Here? (field ' + (i+1) +')')) {\n//\t\t\t\t\tf[i].blur();\t// move focus (helps some frameworks)\n//\t\t\t\t\tbreak\n//\t\t\t\t}\n//\t\t\t\telse f[i].value \= o\n//\t\t}\n//\t\tvoid(0) // return void so browser doesn't navigate, etc.\n
loaderjs=\nwindow.addEventListener('load',\n\tfunction() {\n\t\tvar q \= location.search, p \= '', skp;\n\t\tif ('' \!\= q) {\n\t\t\t\t// reload form UI from query string\n\t\t\t\ttry {\n\t\t\t\t\tp \= decodeURIComponent(q.match(/^\\?javascript\:var( |%20)s\=('|%27)(.*?)('|%27),f\=/)[3]);\n\t\t\t\t\tdocument.title \= 'Paste ' + p;\n\t\t\t\t\tdocument.getElementById('pStr').value \= p;\n\t\t\t\t\t// if generic pastelet maker "Skip...?" exists, set 'skip confirm' accordingly\n\t\t\t\t\tskp \= document.getElementById("skp");\n\t\t\t\t\tif (null \!\= skp) {\n\t\t\t\t\t\tif (q.indexOf(';if(confirm(') < 0) skp.checked \= 'on';\n\t\t\t\t\t}\n\t\t\t\t\t// put a more human-readable, but compatible, version of bookmarklet in textarea\n\t\t\t\t\tdocument.getElementById('bmrk').textContent \= q.substring(1).replace(/\\%27/g,"'");\n\t\t\t\t\t// if not iPhone/iPad unhide 'Pastelet as link' and set anchor tag\n\t\t\t\t\tif (\!(-1 \!\= navigator.userAgent.indexOf('Safari') && -1 \!\= navigator.userAgent.indexOf('Mobile'))) {\n\t\t\t\t\t\tvar pal \= document.getElementById('pal'), pl \= document.getElementById('pl');\n\t\t\t\t\t\tif (null \!\= pal && null \!\= pl) {\n\t\t\t\t\t\t\tpal.setAttribute("style", "display\:inline;padding\:7px;height\:auto");\n\t\t\t\t\t\t\tpl.setAttribute('href', q.substring(1));\n\t\t\t\t\t\t\tpl.setAttribute('title', document.title);\n\t\t\t\t\t\t\tpl.innerHTML \= document.title;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t \t\t\t// unhide remaining steps\n\t\t\t\t\twindow.scrollTo(0,78+document.getElementById('pltMkr').scrollHeight)\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\talert("Unable to decode pastelet.\\r\\nForm will be reset.");\n\t\t\t\t\tlocation.href\=location.href.substring(0,location.href.indexOf('?'));\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t}\n\t\t// hide address bar\n\t\telse window.scrollTo(0,1);\n\t}\n,true);\n// reload page with new bookmarklet appended\nfunction loadpg(p) {\n\tif ('' \!\= p) {\n\t  document.getElementById('bmrk').textContent \= p;\n\t  location.href \= location.protocol + '//' + location.host + location.port + location.pathname + '?' + p\n\t}\n}
local.root=../..
product.copyright=2008-2011
product.date=2011/04/13 12\:06
webappdir=iphone
product.archive=${product.name}-${product.version}
emailjs=// EMAIL\n// unique version of pastelet for pasting into email/login input field WITHOUT confirmation\n//\n\n//\tpastelet- create bookmarklet for Mobile Safari to 'paste' provided text into HTML form text field\n//\n//\tCopyright (c) 2008-2010 Tom King. All rights reserved.\n//\n// Comments- Generated bookmarklet is carefully constructed.\n// *\tThe 'paste string' variable ('n') is defined first to make it more visible and ease editing the bookmark itself.\n// *\tThe text entry types for HTML5 are checked, except search. Search is skipped as a convenience (fixed text for a search is rare)\n// *\tBookmarklet code is optimized for size (ie, string length of all the code), given goal above.\n// **\tit wasn't written as an anonymous function, because the 'function(){..}' declaration adds characters\n// * void(0) is included for cross-browser compatibility, a non-null return value causes some browsers to navigate\n//\n\nfunction pastelet(u) {\n\treturn '' \=\= u ? u \: "javascript\:var%20s\='" + encodeURIComponent(u) + "',f\=document.getElementsByTagName('input'),x\=-1,b\=x,j\=0,l\=f.length,k,n,t;for(;j%3cl;j%2b%2b){k\=f[j];n\=k.id%2bk.name%2bk.title;t\=k.type;if(t%20in{email\:1,login\:1}||(t\!\='hidden'&&(n.indexOf('email')%3e-1||n.indexOf('ogin')%3e0||n.indexOf('user')%3e-1))){x\=j;break}if(-1\=\=b&&'text'\=\=t&&n.indexOf('earch')%3c0)b\=j}" + "if(-1\=\=x)x\=b;if(-1\!\=x){f[x].focus();f[x].value\=s;f[x].blur()}else%20alert('Email%20field%20not%20found');void(0)"\n}\n\n//\n// annotated version of code for generated bookmark \n//\n// var s \= 'your text', // string to 'paste'\n//\t// all potential input fields\n//\tf \= document.getElementsByTagName('input'),\n//\tx \= -1,\n//\tb \= x,\n//\tj \= 0,\n//\tl \= f.length,\n//\tk, n, t;\n//\t// loop through all inputs\n//\tfor (; j < l; j++) {\n//\t\tk \= f[j];\n//\t\tn \= k.id + k.name + k.title; // join id, name, & title to easily check all at once\n//\t\tt \= k.type;\n//\t\t// store index and break when type, id or name matches 'email' or 'ogin' (login/Login) or 'user' (user/userid/username)\n//\t\tif (t in {email\:1,login\:1} || (t \!\= 'hidden' && (n.indexOf('email') > -1 || n.indexOf('ogin') > 0 || n.indexOf('user') >-1))) {\n//\t\t\tx \= j;\n//\t\t\tbreak\n//\t\t}\n//\t\t// set fallback to first 'non-search' text input (uses 'earch' to test for Search or search)\n//\t\tif (-1 \=\= b && 'text' \=\= t && n.indexOf('earch') < 0) b \= j;\n//\t}\n//\t// no match? use fallback\n//\tif(-1 \=\= x) x \= b;\n//\tif (-1 \!\= x) {\n//\t\t// set focus and value to match\n//\t\tf[x].focus();\n//\t\tf[x].value \= s;\n//\t\t// blur to trigger a change event (helps some frameworks)\n//\t\tf[x].blur()\n//\t}\n//\telse alert('Email field not found');\n//\tvoid(0) // return void so browser doesn't navigate, etc.\n// 
product.name=pastelet
typetext=type\="text"
typetel=type\="tel"
typelogin=type\="login"
donations=3.00
admob-urchin=
verbosity=no
webapp=web
typeemail=type\="email"
teljs=// TEL\n// unique version of Pastelet Maker for NOT confirming and pasting into tel input field\n//\n\n//\tpastelet- create bookmarklet for Mobile Safari to 'paste' provided text into HTML form text field\n//\n//\tCopyright (c) 2008-2010 Tom King. All rights reserved.\n//\n// Comments- Generated bookmarklet is carefully constructed.\n// *\tThe 'paste string' variable ('n') is defined first to make it more visible and ease editing the bookmark itself.\n// *\tThe text entry types for HTML5 are checked, except search. Search is skipped as a convenience (fixed text for a search is rare)\n// *\tBookmarklet code is optimized for size (ie, string length of all the code), given goal above.\n// **\tit wasn't written as an anonymous function, because the 'function(){..}' declaration adds characters\n// * void(0) is included for cross-browser compatibility, a non-null return value causes some browsers to navigate\n//\n\nfunction pastelet(u) {\n\treturn ''\=\=u ? u \:"javascript\:var%20s\='"+encodeURIComponent(u)+"',f\=document.getElementsByTagName('input'),x\=-1,b\=x,j\=0,l\=f.length,p\='tel',k,n,t;for(;j%3cl;j%2b%2b){k\=f[j];n\=k.id%2bk.name%2bk.title;t\=k.type;if(t\=\=p||(t\!\='hidden'&&(n.indexOf(p)%3e-1||n.indexOf('hone')%3e0))){x\=j;break}if(-1\=\=b&&'text'\=\=t&&n.indexOf('earch')%3c0)b\=j}" + "if(-1\=\=x)x\=b;if(-1\!\=x){f[x].focus();f[x].value\=s;f[x].blur()}else%20alert('Tel%20field%20not%20found');void(0)"\n};\n\n//\n// annotated version of code for generated bookmark \n//\n// var s \= 'your text', // string to 'paste'\n//\t// all potential input fields\n//\tf \= document.getElementsByTagName('input'),\n//\tx \= -1,\n//\tb \= x,\n//\tj \= 0,\n//\tl \= f.length,\n//\tp\='tel',\n//\tk, n, t;\n//\t// loop through all inputs\n//\tfor (; j < l; j++) {\n//\t\tk \= f[j];\n//\t\tn \= k.id + k.name + k.title;\n//\t\tt \= k.type;\n//\t\t// store index and break when type, id, name or title matches 'tel' or 'hone' (for 'Phone' or 'phone')\n//\t\tif (t\=\=p || (t \!\= 'hidden' && (n.indexOf(p) > -1 || n.indexOf('hone') > 0))) {\n//\t\t\tx \= j;\n//\t\t\tbreak\n//\t\t}\n//\t\t// set fallback to first 'non-search' text input\n//\t\tif (-1 \=\= b && 'text' \=\= t && n.indexOf('earch') < 0) b \= j;\n//\t}\n//\t// no match? use fallback\n//\tif(-1 \=\= x) x \= b;\n//\tif (-1 \!\= x) {\n//\t\t// set focus and value to match\n//\t\tf[x].focus();\n//\t\tf[x].value \= s;\n//\t\t// blur to trigger a change event (helps some frameworks)\n//\t\tf[x].blur()\n//\t}\n//\telse alert('Tel field not found');\n//\tvoid(0) // return void so browser doesn't navigate, etc.\n//
